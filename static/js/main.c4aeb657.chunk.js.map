{"version":3,"sources":["components/Media.jsx","components/Weather.jsx","components/Recipes.jsx","components/Githubusers.jsx","App.jsx","serviceWorker.js","index.js"],"names":["API_KEY","process","Media","props","getMedia","e","preventDefault","media","target","elements","value","state","axios","get","then","response","setState","medias","data","hits","reset","selectChange","this","onSubmit","TextField","id","label","name","placeholder","FormControl","InputLabel","Select","labelId","onChange","MenuItem","Button","style","margin","type","variant","color","disableElevation","display","justifyContent","flexWrap","map","className","key","src","previewURL","alt","width","height","tags","videos","url","small","playing","Component","Weather","getWeather","city","country","sys","temp","main","tempMin","temp_min","tempMax","temp_max","description","weather","icon","errorMessage","cardShow","catch","error","status","setTimeout","Fab","aria-label","Card","position","left","top","transform","CardHeader","title","subheader","CardContent","Typography","gutterBottom","component","Recipes","getRecipe","ingredient","recipes","results","recipe","href","rel","thumbnail","ingredients","githubusers","getUser","login","avatarUrl","avatar_url","htmlUrl","html_url","publicRepos","public_repos","location","followers","Paper","CardActionArea","CardMedia","image","CardActions","App","basename","AppBar","Toolbar","IconButton","edge","Link","to","exact","path","Githubusers","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4aeb657.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport {\n  TextField, FormControl, InputLabel, Select, MenuItem, Button,\n} from '@material-ui/core';\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY1}`;\n\nclass Media extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { medias: [], value: 'image' };\n  }\n\n    getMedia = (e) => {\n      e.preventDefault();\n      const media = e.target.elements.media.value;\n      const { value } = this.state;\n      if (media) { // empty input\n        if (value === 'image') {\n          axios.get(`https://pixabay.com/api/?key=${API_KEY}&q=${media}&image_type=photo&pretty=true`)\n            .then((response) => {\n              this.setState({\n                medias: response.data.hits, // images\n                // value: 'image'\n              });\n            });\n        } else if (value === 'video') {\n          axios.get(`https://pixabay.com/api/videos/?key=${API_KEY}&q=${media}&pretty=true`)\n            .then((response) => {\n              this.setState({\n                medias: response.data.hits, // videos\n                // value: 'image'\n              });\n            });\n        }\n      }\n      e.target.reset(); // making input empty\n    }\n\n    selectChange = (e) => {\n      this.setState({ value: e.target.value });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { medias } = this.state;\n\n      if (value === 'image') {\n        return (\n          <>\n            <h3>Media CARD</h3>\n            <form onSubmit={this.getMedia}>\n              <TextField id=\"standard-basic\" label=\"media\" name=\"media\" placeholder=\"e.g. cat\" />\n&nbsp;&nbsp;\n              <FormControl>\n                <InputLabel id=\"demo-simple-select-label\" />\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={value}\n                  onChange={this.selectChange}\n                >\n                  <MenuItem value=\"image\">Image</MenuItem>\n                  <MenuItem value=\"video\">Video</MenuItem>\n                </Select>\n              </FormControl>\n&nbsp;\n              <Button style={{ margin: '15px' }} type=\"submit\" variant=\"contained\" color=\"primary\" disableElevation>\n  GET\n              </Button>\n            </form>\n            <div style={{ display: 'flex', justifyContent: 'space-center', flexWrap: 'wrap' }}>\n              {medias.map((media) => (\n                <div className=\"card\" key={media.id}>\n                  <div><img src={media.previewURL} alt=\"url\" style={{ width: '100%', height: '100%' }} /></div>\n                  <div>{media.tags}</div>\n                </div>\n              ))}\n            </div>\n          </>\n        );\n      }\n      return (\n        <>\n          <h3>Media CARD</h3>\n          <form onSubmit={this.getMedia}>\n            <TextField id=\"standard-basic\" label=\"media\" name=\"media\" placeholder=\"e.g. cat\" />\n&nbsp;&nbsp;\n            <FormControl>\n              <InputLabel id=\"demo-simple-select-label\" />\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={value}\n                onChange={this.selectChange}\n              >\n                <MenuItem value=\"image\">Image</MenuItem>\n                <MenuItem value=\"video\">Video</MenuItem>\n              </Select>\n            </FormControl>\n&nbsp;\n            <Button style={{ margin: '15px' }} type=\"submit\" variant=\"contained\" color=\"primary\" disableElevation>\n  GET\n            </Button>\n          </form>\n          <div style={{ display: 'flex', justifyContent: 'space-center', flexWrap: 'wrap' }}>\n            {medias.map((media) => (\n              <div className=\"card\" key={media.id}>\n                { media.videos && (\n                <div>\n                  <ReactPlayer\n                    url={media.videos.small.url}\n                    className=\"react-player\"\n                    playing\n                    width=\"100%\"\n                    height=\"100%\"\n                  />\n                </div>\n                ) }\n                <div>{media.tags}</div>\n              </div>\n            ))}\n          </div>\n        </>\n      );\n    }\n}\nexport default Media;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n  TextField, Fab, Card, CardHeader, CardContent, Typography,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nclass Weather extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { errorMessage: false, cardShow: false };\n  }\n\n  // Disappear error message after 3000sec.\n  componentDidUpdate() {\n    setTimeout(() => this.setState({ errorMessage: '' }), 3000);\n  }\n\n    getWeather = (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n\n      axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n        .then((response) => {\n          if (city && country) {\n            this.setState({\n              // weather: response.data,\n              city: response.data.name,\n              country: response.data.sys.country,\n              temp: response.data.main.temp,\n              tempMin: response.data.main.temp_min,\n              tempMax: response.data.main.temp_max,\n              description: response.data.weather[0].description,\n              icon: response.data.weather[0].icon,\n              errorMessage: false,\n              cardShow: true,\n            });\n          } else {\n            this.setState({\n              errorMessage: true,\n              cardShow: false,\n            });\n          }\n        })\n        .catch((error) => {\n          if (error.response.status === 404) {\n            this.setState({\n              errorMessage:\n                            'Weather with the supplied city and country does not exist. Please enter valid city and country',\n            });\n          } else if (error.response.status === 401) {\n            this.setState({\n              errorMessage:\n                            'Unauthorized user. Please provide valid API_KEY.',\n            });\n          }\n        });\n      e.target.reset(); // making input empty\n    }\n\n    render() {\n      const { errorMessage } = this.state;\n      const { cardShow } = this.state;\n      const { city } = this.state;\n      const { country } = this.state;\n      const { description } = this.state;\n      const { temp } = this.state;\n      const { tempMin } = this.state;\n      const { tempMax } = this.state;\n      const { icon } = this.state;\n\n      return (\n        <>\n          <h3>Weather CARD</h3>\n          <div className=\"warning\">{errorMessage}</div>\n          <br />\n\n          <form onSubmit={this.getWeather}>\n            <TextField id=\"filled-basic\" label=\"city\" variant=\"filled\" name=\"city\" placeholder=\"e.g. London\" />\n            {' '}\n            <TextField id=\"filled-basic\" label=\"country\" variant=\"filled\" name=\"country\" placeholder=\"e.g. UK\" />\n            {' '}\n            <Fab type=\"submit\" color=\"primary\" aria-label=\"add\"><AddIcon /></Fab>\n          </form>\n          <br />\n          <br />\n\n          {cardShow\n                    && (\n                    <div>\n                      <Card style={{\n                        width: 325, position: 'absolute', left: '50%', top: '60%', transform: 'translate(-50%, -50%)',\n                      }}\n                      >\n                        <CardHeader\n                          title={city}\n                          subheader={country}\n                        />\n                        <CardContent>\n                          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            <img src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"wthr img\" width=\"200px\" />\n                          </Typography>\n                          <b>{description}</b>\n                          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            <p>\n                              <b>Temperature: </b>\n                              {temp}\n                            </p>\n                            <p>\n                              <b>MIN Temperature: </b>\n                              {tempMin}\n                            </p>\n                            <p>\n                              <b>MAX Temperature: </b>\n                              {tempMax}\n                            </p>\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </div>\n                    )}\n        </>\n      );\n    }\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Helmet from 'react-helmet';\nimport { TextField } from '@material-ui/core';\n\nexport default class Recipes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { recipes: [] };\n  }\n\n  // http://www.recipepuppy.com/api/?i=onions,garlic&q=omelet&p=3\n  getRecipe = (e) => {\n    e.preventDefault();\n    const ingredient = e.target.elements.ingredient.value;\n    if (ingredient) {\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${ingredient}`,\n        ) // https://cors-anywhere.herokuapp.com/ is used to remove error Cross-Origin Read Blocking (CORB)\n        .then((response) => {\n          this.setState({\n            recipes: response.data.results,\n          });\n        });\n    }\n    e.target.reset(); // making input empty\n  };\n\n  render() {\n    const { recipes } = this.state;\n    return (\n      <>\n        <Helmet><title>Recipe</title></Helmet>\n        <h3>Recipe CARD</h3>\n        <form onSubmit={this.getRecipe}>\n          <TextField id=\"standard-basic\" name=\"ingredient\" label=\"Ingredient\" placeholder=\"e.g.fish\" />\n        </form>\n        <div style={{ display: 'flex', justifyContent: 'space-center', flexWrap: 'wrap' }}>\n          {recipes.map((recipe) => (\n            <div className=\"card\" key={recipe.id}>\n              <div><a href={`${recipe.href}`} rel=\"noopener noreferrer\"><img src={recipe.thumbnail} alt=\"recipe\" style={{ width: '100%', height: '100%' }} /></a></div>\n              <div><a href={`${recipe.href}`} rel=\"noopener noreferrer\">{recipe.title}</a></div>\n              <div>{recipe.ingredients}</div>\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Helmet from 'react-helmet';\nimport {\n  TextField, Paper, Typography, Card, CardActionArea, CardActions, CardContent, CardMedia,\n} from '@material-ui/core';\n\nclass githubusers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { errorMessage: false, cardShow: false };\n  }\n\n  // Disappear error message after 2000sec.\n  componentDidUpdate() {\n    setTimeout(() => this.setState({ errorMessage: '' }), 2000);\n  }\n\n    // Form button function\n    // getUser(e) {\n    getUser = (e) => {\n      e.preventDefault();\n      const login = e.target.elements.login.value;\n      axios\n        .get(\n          `https://api.github.com/users/${login}`,\n        )\n        .then((response) => {\n          if (login) {\n            this.setState({\n              // users: response.data,\n              login: response.data.login, // showing login on webpage\n              name: response.data.name, // showing name on webpage,\n              avatarUrl: response.data.avatar_url,\n              htmlUrl: response.data.html_url,\n              publicRepos: response.data.public_repos,\n              location: response.data.location,\n              followers: response.data.followers,\n              errorMessage: false,\n              cardShow: true,\n            });\n          } else {\n            this.setState({\n              errorMessage: true,\n            });\n          }\n        })\n        .catch(() => {\n          this.setState({\n            errorMessage:\n                        'Username does not exist. Please enter valid username',\n          });\n        });\n      e.target.reset(); // making input empty\n    };\n\n    render() {\n      const { errorMessage } = this.state;\n      const { cardShow } = this.state;\n      const { avatarUrl } = this.state;\n      const { login } = this.state;\n      const { name } = this.state;\n      const { location } = this.state;\n      const { htmlUrl } = this.state;\n      const { publicRepos } = this.state;\n      const { followers } = this.state;\n\n      return (\n        <>\n          <Helmet><title>Githubusers</title></Helmet>\n          <h3>GitHub User CARD</h3>\n          {/* <form onSubmit={this.getUser.bind(this)}> */}\n          <form onSubmit={this.getUser}>\n            <TextField id=\"outlined-basic\" variant=\"outlined\" name=\"login\" label=\"GitHub Username\" placeholder=\"e.g. mojombo\" />\n            {/* Displaying error messages */}\n            <Paper>\n              <Typography variant=\"h6\">\n                {errorMessage}\n              </Typography>\n            </Paper>\n          </form>\n          {/* Displaying card contents */}\n          {cardShow\n                    && (\n                    <Card style={{\n                      width: 325, position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)',\n                    }}\n                    >\n                      <CardActionArea>\n                        <CardMedia\n                          style={{ height: 325 }}\n                          image={avatarUrl}\n                        />\n                        <CardContent>\n                          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {login}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            <div>\n                              <b>Name:</b>\n                              {name}\n                            </div>\n                            <div>\n                              <b>Location:</b>\n                              {' '}\n                              {location}\n                            </div>\n                            <div>\n                              <b>GitHhb url:</b>\n                              <a href={`${htmlUrl}`} rel=\"noopener noreferrer\">\n                                {' '}\n                                {/* use noopener noreferrer for target=\"_blank\" */}\n                                {htmlUrl}\n                              </a>\n                            </div>\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                      <CardActions>\n                        <b>Repositories: </b>\n                        {publicRepos}\n                        <b>Followers: </b>\n                        {' '}\n                        {followers}\n                      </CardActions>\n                    </Card>\n                    )}\n        </>\n\n      );\n    }\n}\n\nexport default githubusers;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Media from './components/Media';\nimport Weather from './components/Weather';\nimport Recipes from './components/Recipes';\nimport Githubusers from './components/Githubusers';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" />\n            <Button color=\"inherit\" component={Link} to=\"/\">GitHub Cards</Button>\n            <Button color=\"inherit\" component={Link} to=\"/recipes\">Recipes</Button>\n            <Button color=\"inherit\" component={Link} to=\"/weather\">Weather</Button>\n            <Button color=\"inherit\" component={Link} to=\"/media\">Media</Button>\n          </Toolbar>\n        </AppBar>\n        <Route exact path=\"/\" component={Githubusers} />\n        <Route exact path=\"/recipes\" component={Recipes} />\n        <Route exact path=\"/weather\" component={Weather} />\n        <Route exact path=\"/media\" component={Media} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}